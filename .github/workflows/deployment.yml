# GitHub Actions workflow for building, pushing Docker image, and deploying to Kubernetes with secret automation
name: Deployment

on:
  push:
    branches:
      - main  # Trigger on push to the main branch, adjust as needed
  workflow_dispatch:  # Allow manual triggering of workflow

jobs:
  build-and-transfer:
    name: Build Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Builds
        uses: docker/setup-buildx-action@v3

      - name: Generate image tag
        id: image_tag
        run: |
          echo "tag=$(echo ${{ github.sha }} | head -c7)" >> $GITHUB_OUTPUT

      - name: Build Docker image locally
        run: |
          # Build the docker image locally
          docker build -t localhost:5000/feeti-wallet-service:${{ steps.image_tag.outputs.tag }} .
          docker tag localhost:5000/feeti-wallet-service:${{ steps.image_tag.outputs.tag }} localhost:5000/feeti-wallet-service:latest
          
          # Save image to a tarball
          mkdir -p ./docker-images
          docker save localhost:5000/feeti-wallet-service:${{ steps.image_tag.outputs.tag }} | gzip > ./docker-images/feeti-wallet-service-${{ steps.image_tag.outputs.tag }}.tar.gz

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=60 -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo SSH connection successful"

      - name: Transfer Docker image to VPS
        run: |
          scp -o StrictHostKeyChecking=no -P 22 -C ./docker-images/feeti-wallet-service-${{ steps.image_tag.outputs.tag }}.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: Load Docker image on VPS
        run: |
          # Connect to VPS and load the image
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=60 -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            # Load the Docker image
            docker load < /tmp/feeti-wallet-service-${{ steps.image_tag.outputs.tag }}.tar.gz
          
            # Remove the image file
            rm /tmp/feeti-wallet-service-${{ steps.image_tag.outputs.tag }}.tar.gz
          
            # Set up a local registry if not already running
            docker ps | grep -q registry || docker run -d -p 5000:5000 --restart always --name registry registry:2
          
            # Tag and push to local registry
            docker tag localhost:5000/feeti-wallet-service:${{ steps.image_tag.outputs.tag }} localhost:5000/feeti-wallet-service:${{ steps.image_tag.outputs.tag }}
            docker push localhost:5000/feeti-wallet-service:${{ steps.image_tag.outputs.tag }}
          
            # Tag latest as well
            docker tag localhost:5000/feeti-wallet-service:${{ steps.image_tag.outputs.tag }} localhost:5000/feeti-wallet-service:latest
            docker push localhost:5000/feeti-wallet-service:latest
          ENDSSH

  deploy:
    name: Deployment
    needs: build-and-transfer
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-and-transfer.outputs.image_tag }}
      IMAGE_PATH: localhost:5000/feeti-wallet-service:${{ needs.build-and-transfer.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
          
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=60 -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo SSH connection successful"

      - name: Install NGINX Ingress Controller
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=60 -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            # Install NGINX Ingress Controller if not already installed
            if ! kubectl get namespace ingress-nginx &>/dev/null; then
              echo "Installing NGINX Ingress Controller..."
              kubectl create namespace ingress-nginx
              
              # Download the NGINX Ingress Controller manifest
              curl -o nginx-ingress.yaml https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/cloud/deploy.yaml
              
              # Modify the NGINX Ingress Controller service to use NodePort instead of LoadBalancer
              sed -i 's/type: LoadBalancer/type: NodePort/' nginx-ingress.yaml
              
              # Apply the modified NGINX Ingress Controller manifest
              kubectl apply -f nginx-ingress.yaml
          
              # Wait for NGINX Ingress Controller to be ready
              echo "Waiting for NGINX Ingress Controller to be ready..."
              kubectl -n ingress-nginx wait --for=condition=available deployment --all --timeout=300s
            else
              echo "NGINX Ingress Controller already installed."
              
              # Ensure it's configured as NodePort
              if kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.spec.type}' | grep -q "LoadBalancer"; then
                echo "Converting existing ingress-nginx-controller from LoadBalancer to NodePort..."
                kubectl patch svc ingress-nginx-controller -n ingress-nginx -p '{"spec": {"type": "NodePort"}}'
              else
                echo "NGINX Ingress Controller already configured as NodePort"
              fi
            fi
            
            # Label the ingress-nginx namespace for network policies
            kubectl label namespace ingress-nginx name=ingress-nginx --overwrite || true
          ENDSSH

      - name: Prepare TLS secrets
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=60 -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            # Create TLS secret for HTTPS
            echo "Creating TLS secret from Let's Encrypt certificates..."
            
            # Path to Let's Encrypt certificates
            CERT_PATH="/etc/letsencrypt/live/${{ secrets.HOST_URL }}"
            
            # Check if certificates exist
            if [ -d "$CERT_PATH" ]; then
              # Check if we have read permissions, if not use sudo to copy to a temporary location
              if [ ! -r "$CERT_PATH/fullchain.pem" ] || [ ! -r "$CERT_PATH/privkey.pem" ]; then
                echo "Copying certificates to temporary location with sudo..."
                sudo cp "$CERT_PATH/fullchain.pem" /tmp/fullchain.pem
                sudo cp "$CERT_PATH/privkey.pem" /tmp/privkey.pem
                sudo chmod 644 /tmp/fullchain.pem /tmp/privkey.pem
                
                # Create TLS secret using temporary files
                kubectl create secret tls feeti-tls \
                  --cert=/tmp/fullchain.pem \
                  --key=/tmp/privkey.pem \
                  --namespace=feeti-wallet \
                  --dry-run=client -o yaml | kubectl apply -f -
                
                # Clean up temporary files
                rm -f /tmp/fullchain.pem /tmp/privkey.pem
              else
                # Create TLS secret directly
                kubectl create secret tls feeti-tls \
                  --cert="$CERT_PATH/fullchain.pem" \
                  --key="$CERT_PATH/privkey.pem" \
                  --namespace=feeti-wallet \
                  --dry-run=client -o yaml | kubectl apply -f -
              fi
              
              echo "TLS secret 'feeti-tls' created successfully in wallet namespace."
            else
              echo "ERROR: Let's Encrypt certificates not found at $CERT_PATH"
              echo "Please ensure that Let's Encrypt certificates are properly installed."
              exit 1
            fi
          ENDSSH

      - name: Generate Kubernetes manifests
        run: |
          # Create manifests directory
          mkdir -p ./k8s-wallet
          
          # Generate namespace.yaml
          cat <<EOF > ./k8s-wallet/namespace.yaml
          apiVersion: v1
          kind: Namespace
          metadata:
            name: feeti-wallet
          EOF
          
          # Generate configmap.yaml
          cat <<EOF > ./k8s-wallet/configmap.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: wallet-config
            namespace: feeti-wallet
          data:
            NODE_ENV: "production"
            SERVICE_NAME: "wallet-service"
            PORT: ":3000"
            LOG_LEVEL: "info"
          EOF
          
          # Generate network-policy.yaml
          cat <<EOF > ./k8s-wallet/network-policy.yaml
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: wallet-service-network-policy
            namespace: feeti-wallet
          spec:
            podSelector:
              matchLabels:
                app: wallet-service
            policyTypes:
            - Ingress
            - Egress
            ingress:
            - from:
              - namespaceSelector:
                  matchLabels:
                    name: ingress-nginx
              ports:
              - protocol: TCP
                port: 3000
            - ports:
              - protocol: TCP
                port: 3000
            egress:
            - to:
              - ipBlock:
                  cidr: 0.0.0.0/0
                  except:
                  - 169.254.0.0/16
                  - 172.16.0.0/12
                  - 192.168.0.0/16
              ports:
              - protocol: TCP
                port: 5432  # PostgreSQL
              - protocol: TCP
                port: 4222  # NATS
          EOF
          
          # Generate wallet-service.yaml (NodePort type with specific port)
          cat <<EOF > ./k8s-wallet/wallet-service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: wallet-service
            namespace: feeti-wallet
          spec:
            selector:
              app: wallet-service
            ports:
            - name: http
              port: 3000
              targetPort: 3000
              nodePort: 30100
              protocol: TCP
            type: NodePort
          EOF
          
          # Generate ingress.yaml for API routing with SSL
          cat <<EOF > ./k8s-wallet/ingress.yaml
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: wallet-service-ingress
            namespace: feeti-wallet
            annotations:
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
              nginx.ingress.kubernetes.io/proxy-body-size: "10m"
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
              - vmi2625233.contaboserver.net
              secretName: feeti-tls
            rules:
            - host: vmi2625233.contaboserver.net
              http:
                paths:
                - path: /api/v1/wallet
                  pathType: Prefix
                  backend:
                    service:
                      name: wallet-service
                      port:
                        number: 3000
          EOF
          
          # Generate wallet-ingress.yaml for health checks with SSL
          cat <<EOF > ./k8s-wallet/wallet-ingress.yaml
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: wallet-healthz-ingress
            namespace: feeti-wallet
            annotations:
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
              - vmi2625233.contaboserver.net
              secretName: feeti-tls
            rules:
            - host: vmi2625233.contaboserver.net
              http:
                paths:
                - path: /wallet/healthz
                  pathType: Exact
                  backend:
                    service:
                      name: wallet-service
                      port:
                        number: 3000
          EOF
          
          # Generate auth-deployment.yaml - using locally available image
          cat <<EOF > ./k8s-wallet/auth-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: wallet-service
            namespace: feeti-wallet
            annotations:
              kubernetes.io/change-cause: "Deployed by GitHub Actions - ${IMAGE_TAG}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: wallet-service
            template:
              metadata:
                labels:
                  app: wallet-service
              spec:
                containers:
                - name: wallet-service
                  image: ${IMAGE_PATH}
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 3000
                  resources:
                    limits:
                      cpu: "0.5"
                      memory: "512Mi"
                    requests:
                      cpu: "0.2"
                      memory: "256Mi"
                  env:
                  - name: PORT
                    value: ":3000"
                  - name: NODE_ENV
                    valueFrom:
                      configMapKeyRef:
                        name: wallet-config
                        key: NODE_ENV
                  - name: SERVICE_NAME
                    valueFrom:
                      configMapKeyRef:
                        name: wallet-config
                        key: SERVICE_NAME
                  - name: JWT_KEY
                    valueFrom:
                      secretKeyRef:
                        name: wallet-secrets
                        key: JWT_KEY
                  - name: NATS_URL
                    valueFrom:
                      secretKeyRef:
                        name: wallet-secrets
                        key: NATS_URL
                  - name: HOST_URL
                    valueFrom:
                      secretKeyRef:
                        name: wallet-secrets
                        key: HOST_URL
                  - name: GIN_MODE
                    valueFrom:
                      secretKeyRef:
                        name: wallet-secrets
                        key: GIN_MODE
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: wallet-secrets
                        key: DATABASE_URL
                  startupProbe:
                    httpGet:
                      path: /api/v1/healthz
                      port: 3000
                    initialDelaySeconds: 10
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 30
                  livenessProbe:
                    httpGet:
                      path: /api/v1/healthz
                      port: 3000
                    initialDelaySeconds: 60
                    periodSeconds: 20
                    timeoutSeconds: 5
                    failureThreshold: 5
                  readinessProbe:
                    httpGet:
                      path: /api/v1/healthz
                      port: 3000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
          EOF
          
          # Generate auth-hpa.yaml
          cat <<EOF > ./k8s-wallet/auth-hpa.yaml
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: wallet-hpa
            namespace: feeti-wallet
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: wallet-service
            minReplicas: 1
            maxReplicas: 4
            metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 70
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: 80
          EOF
          
          # Generate health-check.yaml
          cat <<EOF > ./k8s-wallet/health-check.yaml
          apiVersion: batch/v1
          kind: CronJob
          metadata:
            name: wallet-health-check
            namespace: feeti-wallet
          spec:
            schedule: "*/15 * * * *"
            successfulJobsHistoryLimit: 1
            failedJobsHistoryLimit: 3
            jobTemplate:
              spec:
                template:
                  spec:
                    containers:
                    - name: health-check
                      image: curlimages/curl:7.83.1
                      command:
                      - /bin/sh
                      - -c
                      - |
                        if curl -s -o /dev/null -w "%{http_code}" http://wallet-service:3000/api/v1/healthz | grep -q 200; then
                          echo "Health check passed"
                          exit 0
                        else
                          echo "Health check failed"
                          exit 1
                        fi
                    restartPolicy: OnFailure
          EOF

      - name: Transfer Kubernetes manifests to server
        run: |
          # Create directory on remote server
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=60 -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /tmp/k8s-wallet"
          
          # Transfer all generated files
          scp -o StrictHostKeyChecking=no -P 22 -C ./k8s-wallet/* ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/k8s-wallet/

      - name: Clean up old resources
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=60 -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            echo "Cleaning up old Ingress resources..."
          
            # Label the ingress-nginx namespace for network policies if needed
            kubectl label namespace ingress-nginx name=ingress-nginx --overwrite || true
            
            # Remove any ingress with 'wallet.feeti.app' hostname
            OLD_INGRESS=$(kubectl get ingress -n feeti-wallet -o json | jq -r '.items[] | select(.spec.rules[].host == "wallet.feeti.app") | .metadata.name')
            if [ -n "$OLD_INGRESS" ]; then
              echo "Removing old ingress with incorrect hostname: $OLD_INGRESS"
              kubectl delete ingress -n feeti-wallet $OLD_INGRESS
            fi
          
            # Also handle any other duplicate or conflicting ingress
            # But keep our newly created ones
            kubectl get ingress -n feeti-wallet --no-headers | grep -v "wallet-service-ingress" | grep -v "wallet-healthz-ingress" | awk '{print $1}' | xargs -r kubectl delete ingress -n feeti-wallet
          
            echo "Current ingress resources after cleanup:"
            kubectl get ingress -n feeti-wallet
          ENDSSH

      - name: Run kubectl apply with validation
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=60 -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            cd /tmp/k8s-wallet
          
            # Create namespace if it doesn't exist
            kubectl apply -f namespace.yaml
            kubectl apply -f configmap.yaml
          
            # Create or update Kubernetes secrets first
            kubectl create secret generic wallet-secrets \
              --namespace=feeti-wallet \
              --from-literal=JWT_KEY='${{ secrets.JWT_KEY }}' \
              --from-literal=DATABASE_URL='${{ secrets.DATABASE_URL }}' \
              --from-literal=HOST_URL='${{ secrets.HOST_URL }}' \
              --from-literal=NATS_URL='${{ secrets.NATS_URL }}' \
              --from-literal=GIN_MODE='release' \
              --from-literal=PORT=':3000' \
              --dry-run=client -o yaml | kubectl apply -f -
          
            # Apply remaining manifests in correct order
            kubectl apply -f network-policy.yaml
            kubectl apply -f wallet-service.yaml
          
            # Apply ingress
            kubectl apply -f ingress.yaml
            kubectl apply -f wallet-ingress.yaml
          
            # Apply deployment last to ensure all other resources are ready
            kubectl apply -f auth-deployment.yaml
            kubectl apply -f auth-hpa.yaml
          
            # Validate deployment status with increased timeout
            echo "Waiting for deployment to begin rolling out..."
            sleep 5
          
            # Check pod creation before waiting on rollout
            echo "Checking pod status before waiting on rollout..."
            kubectl -n feeti-wallet get pods -l app=wallet-service
          
            # Check the logs in case of pending pods
            PENDING_PODS=$(kubectl -n feeti-wallet get pods -l app=wallet-service -o jsonpath='{.items[?(@.status.phase=="Pending")].metadata.name}')
            if [ -n "$PENDING_PODS" ]; then
              echo "Found pending pods: $PENDING_PODS"
              for pod in $PENDING_PODS; do
                echo "Describing pending pod $pod:"
                kubectl -n feeti-wallet describe pod $pod
              done
            fi
          
            # Longer timeout for rollout status
            if ! kubectl -n feeti-wallet rollout status deployment/wallet-service --timeout=120s; then
              echo "Deployment failed to start rolling out. Getting more diagnostics before rollback..."
          
              # Get pod details
              echo "Pod details:"
              kubectl -n feeti-wallet get pods -l app=wallet-service -o wide
          
              # Get any events related to the pods
              echo "Pod events:"
              kubectl -n feeti-wallet get events --sort-by=.metadata.creationTimestamp | tail -20
          
              # Get logs from any containers that have started
              PODS=$(kubectl -n feeti-wallet get pods -l app=wallet-service -o jsonpath='{.items[*].metadata.name}')
              for pod in $PODS; do
                echo "Logs from pod $pod (if available):"
                kubectl -n feeti-wallet logs $pod --tail=50 || echo "No logs available for $pod"
              done
          
              # Now roll back
              echo "Rolling back deployment..."
              kubectl -n feeti-wallet rollout undo deployment/wallet-service
              exit 1
            fi
          ENDSSH

      - name: Monitor deployment
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=60 -p 22 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            # Wait for deployment to start
            echo "Waiting for pods to be created..."
            sleep 5
            
            # Monitor deployment rollout
            if ! kubectl -n feeti-wallet rollout status deployment/wallet-service --timeout=120s; then
              echo "Deployment failed to roll out within timeout. Check pod logs for errors."
              kubectl -n feeti-wallet get pods
              for pod in $(kubectl -n feeti-wallet get pods -l app=wallet-service -o name); do
                echo "Logs for $pod:"
                kubectl -n feeti-wallet logs $pod --tail=50
              done
              exit 1
            fi
            
            # Verify the service is correctly configured
            echo "Checking service status..."
            kubectl -n feeti-wallet get service wallet-service
            
            # Test paths directly on the service to verify routes
            echo "Testing service endpoints directly (this should work)..."
            kubectl -n feeti-wallet run curl-test --image=curlimages/curl --rm -i --restart=Never -- \
              curl --max-time 3 http://wallet-service:3000/api/v1/wallet/healthz || echo "Health endpoint may have different path"
            
            echo "Checking endpoints..."
            kubectl -n feeti-wallet get endpoints
            
            echo "Checking Ingress controller status..."
            kubectl -n ingress-nginx get pods
            
            echo "Checking Ingress configuration details:"
            kubectl -n feeti-wallet describe ingress
            
            echo "Testing SSL certificate configuration..."
            # Check if curl with https works (verifying SSL setup)
            kubectl -n feeti-wallet run curl-test-ssl --image=curlimages/curl --rm -i --restart=Never -- \
              curl --max-time 10 -v -k https://${{ secrets.HOST_URL }}/api/v1/wallet/healthz || echo "HTTPS test failed"
            
            echo "Deployment completed successfully. Your service should be available at:"
            echo "For API: https://${{ secrets.HOST_URL }}/api/v1/wallet"
            echo "For health endpoint: https://${{ secrets.HOST_URL }}/wallet/healthz"
          ENDSSH

      - name: Send success notification
        if: success()
        run: |
          echo "Successfully deployed wallet-service with HTTPS."
          echo "Service is now available at https://${{ secrets.HOST_URL }}/api/v1/wallet"
          
          # You can add other notification methods here (Slack, Discord, etc.)

  notify:
    name: Send Notification
    needs: [build-and-transfer, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment result
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment successful - New version of feeti-wallet-service is live"
            # You could add actual notification code here (Slack, Email, etc.)
          else
            echo "❌ Deployment failed - Check workflow logs for details"
            # You could add actual notification code here (Slack, Email, etc.)
          fi